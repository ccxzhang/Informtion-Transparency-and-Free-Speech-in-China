dplyr::select(4,5)
table(.)
test<- dat%>%
dplyr::select(4,5)
table(.)
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- rbind(gg, data.frame(ct))
}
View(gg)
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, data.frame(ct))
}
x
View(gg)
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, data.frame(ct))
}
gg
bind_rows()
?bind_rows()
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- rbind(gg, data.frame(ct), id.)
}
?rbind()
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, data.frame(ct), id.)
}
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, data.frame(ct))
}
gg
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- merge(gg, data.frame(ct), by= "good_grade")
}
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- outer(gg, data.frame(ct), by= "good_grade")
}
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, ct)
}
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, data.frma(ct))
}
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, data.frame(ct))
}
gg
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, data.frame(ct))
}
reshape2:: melt(gg)
gg<- data.frame()
for (i in 5:9) {
ct<- dat%>%
dplyr:: select(4,i) %>%
table(.)
gg<- bind_rows(gg, data.frame(ct))
}
gg
paste("table", 5)
paste("table", 5, sep= '')
str(paste("table", 5, sep= ''))
?select_if()
dat[5:9]
lapply(dat[5,9], table, dat$good_grade)
attach(dat)
crosstables<-list(NULL)
for(i in colnames(dat)[5:9]){
crosstables[[i]] <- table(get(i), good_grade)
}
View(ci_table)
View(crosstables)
crosstables[1]
attach(dat)
crosstables<-list(NULL)
for(i in colnames(dat)[5:9]){
crosstables[[i]] <- table(get(i), good_grade)
}
crosstables[[1]]
attach(dat)
crosstables<-list(NULL)
for(i in colnames(dat)[5:9]){
crosstables[[i]] <- table(get(i), good_grade)
}
crosstables[["prevexp"]]
attach(dat)
varlists<- colnames(dat)[5:9]
crosstable1<-list(NULL)
crosstable2<-list(NULL)
for(i in varlists){
crosstable1[[i]] <- table(get(i), good_grade)
crosstable2[[i]] <- table(get(i), grade)
}
crosstables[["prevexp"]]
View(crosstable2)
attach(dat)
varlists<- colnames(dat)[5:9]
crosstable1<-list(NULL)
crosstable2<-list(NULL)
for(i in varlists){
crosstable1[[i]] <- table(get(i), good_grade)
crosstable2[[i]] <- table(get(i), grade)
}
for(i in varlists) {
crosstable1[[i]]
}
attach(dat)
varlists<- colnames(dat)[5:9]
crosstable1<-list(NULL)
crosstable2<-list(NULL)
for(i in varlists){
crosstable1[[i]] <- table(get(i), good_grade)
crosstable2[[i]] <- table(get(i), grade)
}
for(i in varlists) {
print(crosstable1[[i]])
}
attach(dat)
varlists<- colnames(dat)[5:9]
crosstable1<-list(NULL)
crosstable2<-list(NULL)
for(i in varlists){
crosstable1[[i]] <- table(get(i), good_grade)
crosstable2[[i]] <- table(get(i), grade)
}
for(i in varlists) {
print(crosstable1[[i]])
}
attach(dat)
varlists<- colnames(dat)[5:9]
crosstable1<-list(NULL)
crosstable2<-list(NULL)
for(i in varlists){
crosstable1[[i]] <- table(get(i), good_grade)
crosstable2[[i]] <- table(get(i), grade)
}
for(i in varlists) {
print(crosstable1[[i]])
}
attach(dat)
varlists<- colnames(dat)[5:9]
crosstable1<-list(NULL)
crosstable2<-list(NULL)
for(i in varlists){
crosstable1[[i]] <- table(get(i), good_grade)
crosstable2[[i]] <- table(get(i), grade)
}
for(i in varlists) {
print(crosstable1[[i]])
print(crosstable2[[i]])
}
attach(dat)
varlists<- colnames(dat)[5:9]
crosstable1<-list(NULL)
crosstable2<-list(NULL)
for(i in varlists){
print(table(get(i), good_grade))
print(table(get(i), grade))
}
require(tidyverse)
library(mvtnorm)
require(MASS) # For ordered models
require(nnet) # For multinomial models
require(obsval) # For simulating confidence intervals
require(mfx)
# devtools::install_github("chrismeserole/obsval") # Too install, if need be
knitr::opts_chunk$set(warning = F,error = F,message = F)
dat <- readr::read_csv('oral-args-data.csv') %>%
# Convert Characters to Factors
dplyr::mutate(grade = factor(grade,
levels = c("D","C","B","A"))) %>%
# Previous experience to numeric
# 0: "None (0)"
# 1: "Some (1-5)"
# 2: "Experienced (6 +)
dplyr::mutate(prevexp = as.numeric(factor(prevexp,
levels = c("None (0)",
"Some (1-5)",
"Experienced (6 +)"))) - 1)
# Preview the data
dplyr::glimpse(dat)
table(dat$grade, dat$good_grade)
attach(dat)
varlists<- colnames(dat)[5:9]
for(i in varlists){
print(table(get(i), good_grade))
print(table(get(i), grade))
}
View(dat)
View(dat)
View(dat)
require(tidyverse)
library(mvtnorm)
require(MASS) # For ordered models
require(nnet) # For multinomial models
require(obsval) # For simulating confidence intervals
require(mfx)
# devtools::install_github("chrismeserole/obsval") # Too install, if need be
knitr::opts_chunk$set(warning = F,error = F,message = F)
dat <- readr::read_csv('oral-args-data.csv') %>%
# Convert Characters to Factors
dplyr::mutate(grade = factor(grade,
levels = c("D","C","B","A"))) %>%
# Previous experience to numeric
# 0: "None (0)"
# 1: "Some (1-5)"
# 2: "Experienced (6 +)
dplyr::mutate(prevexp = as.numeric(factor(prevexp,
levels = c("None (0)",
"Some (1-5)",
"Experienced (6 +)"))) - 1)
# Preview the data
dplyr::glimpse(dat)
table(dat$grade, dat$good_grade)
attach(dat)
varlists<- colnames(dat)[5:9]
## Use for loop to create multiple tables
for(i in varlists){
print(table(get(i), good_grade))
print(table(get(i), grade))
}
mod1<- glm(good_grade~ prevexp+ wash_elite+ eliteschool+ lawprof+ fedattrn,
data=dat,family=binomial(link= "probit"))
coef(summary(mod1)) %>% round(4)
## Use mfx package to get marginal effects
probitmfx(mod1, data= dat, atmean= FALSE)
output<- matrix(ncol=2, nrow=2)
for(i in 1:2){
X= model.matrix(mod1)
## Set wash_elite as 0,1,2 and record
X[,3]= i-1
output[i,1]= i-1
## Calculate the mean of probability of prevexp being 0,1,2
output[i,2]= mean(pnorm(X%*%coefficients(mod1)))
}
## Transfer to the dataframe and rename the column
mod1_output<- data.frame(output)
colnames(mod1_output)<- c('wash_elite', 'probability')
mod1_output
mod1_output %>%
summarise(discrete_differences= probability- lag(probability, 1))
mod1_obsval<- obsval(good_grade~ prevexp+ wash_elite+ eliteschool+ lawprof+ fedattrn,
data= dat,
reg.model= "probit",
effect.var= "wash_elite",
effect.vals= c(0,1))
## Create a tibble displaying 95% CI
ci_table<- tibble(wash_elite= colnames(mod1_obsval$means),
est= as.numeric(mod1_obsval$means),
low= as.numeric(mod1_obsval$low.ci),
high= as.numeric(mod1_obsval$high.ci))
ci_table
require(tidyverse)
library(mvtnorm)
require(MASS) # For ordered models
require(nnet) # For multinomial models
require(obsval) # For simulating confidence intervals
require(mfx)
# devtools::install_github("chrismeserole/obsval") # Too install, if need be
knitr::opts_chunk$set(warning = F,error = F,message = F)
dat <- readr::read_csv('oral-args-data.csv') %>%
# Convert Characters to Factors
dplyr::mutate(grade = factor(grade,
levels = c("D","C","B","A"))) %>%
# Previous experience to numeric
# 0: "None (0)"
# 1: "Some (1-5)"
# 2: "Experienced (6 +)
dplyr::mutate(prevexp = as.numeric(factor(prevexp,
levels = c("None (0)",
"Some (1-5)",
"Experienced (6 +)"))) - 1)
# Preview the data
dplyr::glimpse(dat)
table(dat$grade, dat$good_grade)
attach(dat)
varlists<- colnames(dat)[5:9]
## Use for loop to create multiple tables
for(i in varlists){
print(table(get(i), good_grade))
print(table(get(i), grade))
}
mod1<- glm(good_grade~ prevexp+ wash_elite+ eliteschool+ lawprof+ fedattrn,
data=dat,family=binomial(link= "probit"))
coef(summary(mod1)) %>% round(4)
## Use mfx package to get marginal effects
probitmfx(mod1, data= dat, atmean= FALSE)
output<- matrix(ncol=2, nrow=2)
for(i in 1:2){
X= model.matrix(mod1)
## Set wash_elite as 0,1,2 and record
X[,3]= i-1
output[i,1]= i-1
## Calculate the mean of probability of prevexp being 0,1,2
output[i,2]= mean(pnorm(X%*%coefficients(mod1)))
}
## Transfer to the dataframe and rename the column
mod1_output<- data.frame(output)
colnames(mod1_output)<- c('wash_elite', 'probability')
mod1_output
mod1_output %>%
summarise(discrete_differences= probability- lag(probability, 1))
mod1_obsval<- obsval(good_grade~ prevexp+ wash_elite+ eliteschool+ lawprof+ fedattrn,
data= dat,
reg.model= "probit",
effect.var= "wash_elite",
effect.vals= c(0,1))
## Create a tibble displaying 95% CI
ci_table<- tibble(wash_elite= colnames(mod1_obsval$means),
est= as.numeric(mod1_obsval$means),
low= as.numeric(mod1_obsval$low.ci),
high= as.numeric(mod1_obsval$high.ci))
ci_table
mod1_pred<- as.tibble(mod1_obsval$preds)
## Use simulated values to get differences and 95% ci
diff_ci<- mod1_pred %>%
mutate(diff1= var_1- var_0) %>%
summarise(diff1_ci= quantile(diff1, probs= c(.025,.975)))
diff_ci
mod_ordered<- MASS::polr(grade~ prevexp+ wash_elite+ eliteschool+ lawprof+ fedattrn,
method= "probit", data=dat)
summary(mod_ordered, digits= 2)
require(tidyverse)
library(mvtnorm)
require(MASS) # For ordered models
require(nnet) # For multinomial models
require(obsval) # For simulating confidence intervals
require(mfx)
# devtools::install_github("chrismeserole/obsval") # Too install, if need be
knitr::opts_chunk$set(warning = F,error = F,message = F)
dat <- readr::read_csv('oral-args-data.csv') %>%
# Convert Characters to Factors
dplyr::mutate(grade = factor(grade,
levels = c("D","C","B","A"))) %>%
# Previous experience to numeric
# 0: "None (0)"
# 1: "Some (1-5)"
# 2: "Experienced (6 +)
dplyr::mutate(prevexp = as.numeric(factor(prevexp,
levels = c("None (0)",
"Some (1-5)",
"Experienced (6 +)"))) - 1)
# Preview the data
dplyr::glimpse(dat)
table(dat$grade, dat$good_grade)
attach(dat)
varlists<- colnames(dat)[5:9]
## Use for loop to create multiple tables
for(i in varlists){
print(table(get(i), good_grade))
print(table(get(i), grade))
}
mod1<- glm(good_grade~ prevexp+ wash_elite+ eliteschool+ lawprof+ fedattrn,
data=dat,family=binomial(link= "probit"))
coef(summary(mod1)) %>% round(4)
## Use mfx package to get marginal effects
probitmfx(mod1, data= dat, atmean= FALSE)
output<- matrix(ncol=2, nrow=2)
for(i in 1:2){
X= model.matrix(mod1)
## Set wash_elite as 0,1,2 and record
X[,3]= i-1
output[i,1]= i-1
## Calculate the mean of probability of prevexp being 0,1,2
output[i,2]= mean(pnorm(X%*%coefficients(mod1)))
}
## Transfer to the dataframe and rename the column
mod1_output<- data.frame(output)
colnames(mod1_output)<- c('wash_elite', 'probability')
mod1_output
mod1_output %>%
summarise(discrete_differences= probability- lag(probability, 1))
mod1_obsval<- obsval(good_grade~ prevexp+ wash_elite+ eliteschool+ lawprof+ fedattrn,
data= dat,
reg.model= "probit",
effect.var= "wash_elite",
effect.vals= c(0,1))
## Create a tibble displaying 95% CI
ci_table<- tibble(wash_elite= colnames(mod1_obsval$means),
est= as.numeric(mod1_obsval$means),
low= as.numeric(mod1_obsval$low.ci),
high= as.numeric(mod1_obsval$high.ci))
ci_table
mod1_pred<- as.tibble(mod1_obsval$preds)
## Use simulated values to get differences and 95% ci
diff_ci<- mod1_pred %>%
mutate(diff1= var_1- var_0) %>%
summarise(diff1_ci= quantile(diff1, probs= c(.025,.975)))
diff_ci
mod_ordered<- MASS::polr(grade~ prevexp+ wash_elite+ eliteschool+ lawprof+ fedattrn,
method= "probit", data=dat)
summary(mod_ordered, digits= 2)
ordered_output<- matrix(ncol=5, nrow=2)
for(i in 1:2){
X= model.matrix(mod_ordered)[,-1]
coef= mod_ordered$coefficients
cuts= mod_ordered$zeta
## Set washington elite as 0,1
X[,2]= i-1
## Set up the coefficients and denominator
pr_getA= 1- pnorm(cuts[3] - X%*%coef)
pr_getB= pnorm(cuts[3]- X%*%coef)- pnorm(cuts[2] - X%*%coef)
pr_getC= pnorm(cuts[2]- X%*%coef)- pnorm(cuts[1] - X%*%coef)
pr_getD= pnorm(cuts[1] - X%*%coef)
## Calculate the mean of probability of washington ELITE being 0,1
ordered_output[i,1]= i-1
ordered_output[i,2]= mean(pr_getA)
ordered_output[i,3]= mean(pr_getB)
ordered_output[i,4]= mean(pr_getC)
ordered_output[i,5]= mean(pr_getD)
}
ordered_model_output<- data.frame(ordered_output)
colnames(ordered_model_output)<- c('wash_elite', 'A', 'B', 'C', 'D')
ordered_model_output
ordered_model_output %>%
summarise(discrete_differences_A= A- lag(A, 1),
discrete_differences_B= B- lag(B, 1),
discrete_differences_C= C- lag(C, 1),
discrete_differences_D= D- lag(D, 1))
library(tidyverse)
library(stargazer)
library(sandwich, lmtest, zoo)
library(mfx)
## Set the document folder as working directory
setwd("~/Documents/PPOL565/Project/Ideology-and-Public-Trust-in-China")
## Load the dataset
dat<- read.csv("Data/iptic_index.csv")
View(dat)
library(tidyverse)
library(stargazer)
library(sandwich, lmtest, zoo)
library(mfx)
## Set the document folder as working directory
setwd("~/Documents/PPOL565/Project/Ideology-and-Public-Trust-in-China")
## Load the dataset
dat<- read.csv("Data/iptic_index.csv")
## Logistic regressions for q3 and q5
mod1<- glm(q3~Democracy+ Freedom+ Market+ Socialism+ Globalization+ Traditionalism+ Nationalism+
hs+ college+ above_college+ i50_100k+ i100_150k+ i150_300k+ ia300k+
north+ northeast+ east+ southcentral+ southwest+ age+ gender,
data= dat, family= binomial(link= "logit"))
mod2<- glm(q5~Democracy+ Freedom+ Market+ Socialism+ Globalization+ Traditionalism+ Nationalism+
hs+ college+ above_college+ i50_100k+ i100_150k+ i150_300k+ ia300k+
north+ northeast+ east+ southcentral+ southwest+ age+ gender,
data= dat, family= binomial(link= "logit"))
## Logistic regressions for qs
mod3<- glm(qs0~Democracy+ Freedom+ Market+ Socialism+ Globalization+ Traditionalism+ Nationalism+
hs+ college+ above_college+ i50_100k+ i100_150k+ i150_300k+ ia300k+
north+ northeast+ east+ southcentral+ southwest+ age+ gender,
data= dat, family= binomial(link= "logit"))
mod4<- glm(qs01~Democracy+ Freedom+ Market+ Socialism+ Globalization+ Traditionalism+ Nationalism+
hs+ college+ above_college+ i50_100k+ i100_150k+ i150_300k+ ia300k+
north+ northeast+ east+ southcentral+ southwest+ age+ gender,
data= dat, family= binomial(link= "logit"))
mod5<- glm(qs10~Democracy+ Freedom+ Market+ Socialism+ Globalization+ Traditionalism+ Nationalism+
hs+ college+ above_college+ i50_100k+ i100_150k+ i150_300k+ ia300k+
north+ northeast+ east+ southcentral+ southwest+ age+ gender,
data= dat, family= binomial(link= "logit"))
mod6<- glm(qs2~Democracy+ Freedom+ Market+ Socialism+ Globalization+ Traditionalism+ Nationalism+
hs+ college+ above_college+ i50_100k+ i100_150k+ i150_300k+ ia300k+
north+ northeast+ east+ southcentral+ southwest+ age+ gender,
data= dat, family= binomial(link= "logit"))
stargazer(mod1, mod2, mod3,mod4, mod5, mod6, title= "Results", align = TRUE, header = FALSE,
no.space = FALSE, font.size = "small", df = FALSE)
